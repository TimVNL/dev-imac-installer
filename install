#!/bin/bash
# A shell script to prep a new iMac for development use
# Written by: TimVNL somewhere in 2017 or 2018
EDITOR=nano

softwareupdate () {
 echo ""
 echo "Installing updates if any"
 sudo softwareupdate -ia
}

config_osxdefaults() {
 # Ask for sudo password
 sudo -v
 # Keep-alive: update existing `sudo` time stamp until `.osx` has finished
 while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
 # Disable the sound effects on boot
 sudo nvram SystemAudioVolume=" "
 # Check for software updates daily, not just once per week
 defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
 # When performing a search, search the current folder by default
 defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
 # Avoid creating .DS_Store files on network volumes
 defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
 # Save to disk (not to iCloud) by default
 defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
 # Automatically quit printer app once the print jobs complete
 defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
 # Remove duplicates in the “Open With” menu (also see `lscleanup` alias)
 /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
 # Reveal IP address, hostname, OS version, etc. when clicking the clock
 sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
 # Require password immediately after sleep or screen saver begins
 defaults write com.apple.screensaver askForPassword -int 1
 defaults write com.apple.screensaver askForPasswordDelay -int 0
 # Prevent Time Machine from prompting to use new hard drives as backup volume
 defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
 # Increase sound quality for Bluetooth headphones/headsets
 defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40
 read -p "OSX defaults are configured press [enter] to continue"
 files_showhidden
}

files_showhidden(){
 read -p "Always show hidden files? [y/n]" hfv
 if [[ $hfv = y ]] ; then
  echo "Setting default for AppleShowAllFiles to Yes"
  defaults write com.apple.finder AppleShowAllFiles YES
  echo "Rebooting finder to show all files"
  killall Finder /System/Library/CoreServices/Finder.app
  read -p "Hidden files are now visible in finder press [enter] to continue"
 fi
}
osx_ssdpresent() {
 read -p "SSD present in system? [y/n]" ssdpresent
 if [[ $ssdpresent = y ]] ; then
   brew cask install macs-fan-control
   echo "Don't forget to set HDD Temp Control to Custom Value 2750 in macs-fan-control!"
   # enable TRIM
   sudo trimforce enable
   # Disable local Time Machine snapshots
   sudo tmutil disablelocal
   # Disable hibernation (speeds up entering sleep mode)
   sudo pmset -a hibernatemode 0
   # Disable the sudden motion sensor as it’s not useful for SSDs
   sudo pmset -a sms 0
   echo ""
   read -p "SSD Optimize is done [enter] to continue"
 fi
}

install_xcode(){
  echo "installing xcode command line tools"
  xcode-select --install
  read -p "Xcode Command Line Tools done installing? Press [enter] to continue"
}

install_homebrew(){
  echo "installing Homebrew the missing package manager for OS X"
  if [ ! -d /usr/local/bin/brew ]; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
   echo "Homebrew is already installed! Skipping..."
  fi
  echo "Making sure Homebrew is working"
  brew doctor
  echo "Installing homebrew bundle: Bundler for non-Ruby dependencies from Homebrew"
  brew tap Homebrew/bundle
  read -p "Homebrew OK? Press [enter] to continue"
}

install_default_apps(){
  echo "Going to install default apps now this can take a while..."
  echo ""
  echo "Checking if Homebrew is installed"
  install_homebrew
  echo "Installing all default apps"
  brew bundle
  read -p "All Apps OK? Press [enter] to continue"
}

config_userdefaults() {
  echo "Configuring some default user folders"
  echo ""
  echo "Making Projects folder in $HOME"
  if [ ! -d $HOME/Projects ]; then
   mkdir $HOME/Projects
  else
   echo "$HOME/Projects already exists! Skipping..."
  fi
  echo ""
  if [ ! -d $HOME/bin ]; then
   echo "Make $HOME/bin for user BASH scripts"
   mkdir $HOME/bin
   chflags hidden $HOME/bin
  else
   echo "$HOME/bin already exists! Skipping..."
  fi
  echo ""
  echo "Setting up some defaults for BASH"
  # Adding .hushlogin to remove first useless first line when terminal opens
  cp hushlogin $HOME/.hushlogin
  # Removing stock .bash_profile and downloading new ones
  if [ ! -f $HOME/.bash_profile ]; then
   echo "Placing .bash_profile in $HOME"
   cp bash_profile $HOME/.bash_profile
  else
   echo "$HOME/.bash_profile already exists! Making a backup..."
   mv $HOME/.bash_profile $HOME/.bash_profile.back
   echo ""
   echo "Backup made, located here $HOME/.bash_profile.back"
   echo ""
   echo "Placing new updated .bash_profile"
   cp bash_profile $HOME/.bash_profile
  fi
  sleep 1
  echo ""
  if [ ! -f $HOME/.bash_aliases ]; then
   echo "placing .bash_aliases in $HOME"
   cp bash_aliases $HOME/.bash_aliases
  else
   echo "$HOME/.bash_aliases already exists! Making a backup..."
   mv $HOME/.bash_aliases $HOME/.bash_aliases.back
   echo ""
   echo "Backup made, located here $HOME/.bash_aliases.back"
   echo ""
   echo "Placing new updated .bash_aliases"
   cp bash_aliases $HOME/.bash_aliases
  fi
  sleep 1
  echo ""
  if [ ! -f $HOME/.bash_prompt ]; then
   echo "placing .bash_prompt for colored prompt in $HOME"
   cp bash_prompt $HOME/.bash_prompt
  else
   echo "$HOME/.bash_prompt already exists! Making a backup..."
   mv $HOME/.bash_prompt $HOME/.bash_prompt.back
   echo ""
   echo "Backup made, located here $HOME/.bash_prompt.back"
   echo ""
   echo "Placing new updated .bash_prompt"
   cp bash_prompt $HOME/.bash_prompt
  fi
  sleep 1
  echo ""
  echo "making sure all .bash have the correct chmod rights"
  chmod 755 $HOME/.bash_*
  echo ""
  echo "Placing brew-update in $HOME/bin for one stop Homebrew updating."
  # Add some usefull things to user bin folder
  cp brew-update $HOME/bin/brew-update
  source $HOME/.bash_profile
  read -p "User Defaults OK? Press [enter] to continue"
}

generate_sshkey(){
  if [ -f $HOME/.ssh/id_rsa ]; then
   echo "SSH key already present in $HOME/.ssh"
  else
   echo -n "Enter your E-Mail: "
   read -e EMAIL
   ssh-keygen -t rsa -b 4096 -C "$EMAIL"
   echo ""
   echo "SSH key generated in $HOME/.ssh"
  fi
  echo ""
  config_ssh
}

config_ssh() {
 echo "Making sure the .ssh foler and files have the correct rights"
 chmod 700 $HOME/.ssh
 chmod 600 $HOME/.ssh/*
 chmod 644 $HOME/.ssh/*.pub
 echo ""
 echo "adding ssh config file with option to hash all host in the knownhosts file for protection"
 cp ssh-config $HOME/.ssh/config
 echo ""
}

config_git() {
  echo "Configuring GIT"
  sudo mv /usr/bin/git /usr/bin/git-apple # Move Apple GIT and use Homebrew git
  brew link --force git
  echo -n "Enter your Name: "
  read -e NAME
  git config --global user.name "$NAME"
  echo -n "Enter your E-Mail: "
  read -e EMAIL
  git config --global user.email $EMAIL
  git config --global push.default simple
  git config color.ui true
  echo "adding global gitignore"
  config_gitignore
}

config_gitignore() {
 read -p "Removing old .gitignore Press [enter] to continue"
 rm $HOME/.gitignore $HOME/.gitignore_global
 echo "getting latest global GIT ignore"
 curl -o $HOME/.gitignore https://gist.githubusercontent.com/TimVNL/506e98af85d78682c58e/raw/049f30eb68143674d331aa2b93b3aeba73c73f5a/.gitignore_global
 git config --global core.excludesfile $HOME/.gitignore
 echo ""
}

complete_install() {
  echo "Install all defaults.... This can take a while!"
  # Ask for the administrator password upfront
  sudo -v
  # Keep-alive: update existing `sudo` time stamp until `complete install` has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
  softwareupdate
  config_osxdefaults
  install_xcode
  config_userdefaults
  install_default_apps
  generate_sshkey
  config_git
  osx_ssdpresent
  echo ""
  echo "Installation DONE! Run configure GIT if someone is going to use the iMac!"
}

# function to display menus
show_menus() {
  clear
  echo ""
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo "iMac installer / updater"
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo ""
  echo "1.    Install Everything (new imac)"
  echo "2.    Install Xcode Command Line Tools"
  echo "3.    Install Homebrew"
  echo "4.    Install Default Apps"
  echo "5.    Generate SSH Key"
  echo "6.    Set .ssh folder to correct chmod rights."
  echo "7.    Configure git"
  echo "8.    Add or update global gitignore"
  echo "10.   Optimize iMac for SSD"
  echo "11    Show hidden files in Finder"
  echo "12    Setup default user folders and BASH"
  echo "13.   Exit"
}

# Read user options
read_options(){
  local choice
  read -p "Enter choice [ 1 - 13] " choice
  case $choice in
    1)    complete_install ;;
    2)    install_xcode ;;
    3)    install_homebrew ;;
    4)    install_default_apps ;;
    5)    generate_sshkey ;;
    6)    config_ssh ;;
    7)    config_git ;;
    8)    config_gitignore ;;
    9)   osx_ssdpresent ;;
    10)   files_showhidden ;;
    11)   config_userdefaults ;;
    12)   exit 0;;
    *)   echo "Oops!!! Please select a choice between 1 and 12";
         echo "Press Enter to continue. . ." ; read ;;
  esac
}

# Main logic - infinite loop
while true
do
  show_menus
  read_options
done
